;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: Context
;; TLB: _ bounced:bool sender:address value:int257 raw:^slice = Context
;;

_ $Context$_get_value((int, slice, int, slice) v) inline {
    var (v'bounced, v'sender, v'value, v'raw) = v;
    return v'value;
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_bounce_value_mode_body(slice to, int bounce, int value, int mode, cell body) inline {
    return (bounce, to, value, mode, body, null(), null());
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int queryId) inline {
    return (queryId);
}

;;
;; Type: InternalScam
;; Header: 0xc1187f01
;; TLB: internal_scam#c1187f01 query_id:uint64 count_mint:uint32 count_votes:uint32 = InternalScam
;;

(slice, ((int, int, int))) $InternalScam$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 3239608065);
    var v'query_id = sc_0~load_uint(64);
    var v'count_mint = sc_0~load_uint(32);
    var v'count_votes = sc_0~load_uint(32);
    return (sc_0, (v'query_id, v'count_mint, v'count_votes));
}

;;
;; Type: InternalNewPer
;; Header: 0x0e602d91
;; TLB: internal_new_per#0e602d91 query_id:uint64 new_per_to_break:uint32 = InternalNewPer
;;

builder $InternalNewPer$_store(builder build_0, (int, int) v) inline {
    var (v'query_id, v'new_per_to_break) = v;
    build_0 = store_uint(build_0, 241184145, 32);
    build_0 = build_0.store_uint(v'query_id, 64);
    build_0 = build_0.store_uint(v'new_per_to_break, 32);
    return build_0;
}

cell $InternalNewPer$_store_cell((int, int) v) inline {
    return $InternalNewPer$_store(begin_cell(), v).end_cell();
}

((int, int)) $InternalNewPer$_constructor_query_id_new_per_to_break(int query_id, int new_per_to_break) inline {
    return (query_id, new_per_to_break);
}

;;
;; Type: InternalPay
;; Header: 0xf93d9bfb
;; TLB: internal_pay#f93d9bfb query_id:uint64 prev_owner:address = InternalPay
;;

(slice, ((int, slice))) $InternalPay$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 4181564411);
    var v'query_id = sc_0~load_uint(64);
    var v'prev_owner = sc_0~__tact_load_address();
    return (sc_0, (v'query_id, v'prev_owner));
}

;;
;; Type: GratzWithdrawAll
;; Header: 0xa32ccaf3
;; TLB: gratz_withdraw_all#a32ccaf3 query_id:uint64 = GratzWithdrawAll
;;

(slice, ((int))) $GratzWithdrawAll$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2737621747);
    var v'query_id = sc_0~load_uint(64);
    return (sc_0, (v'query_id));
}

;;
;; Type: InsuranceData
;; TLB: _ nft_collection:address timestamp_end:uint64 per_to_break:uint16 frozen_coins:int257 count_pays:int257 scam:bool = InsuranceData
;;

(slice, int, int, int, int, int) $InsuranceData$_to_external(((slice, int, int, int, int, int)) v) inline {
    var (v'nft_collection, v'timestamp_end, v'per_to_break, v'frozen_coins, v'count_pays, v'scam) = v; 
    return (v'nft_collection, v'timestamp_end, v'per_to_break, v'frozen_coins, v'count_pays, v'scam);
}

((slice, int, int, int, int, int)) $InsuranceData$_constructor_timestamp_end_nft_collection_per_to_break_scam_frozen_coins_count_pays(int timestamp_end, slice nft_collection, int per_to_break, int scam, int frozen_coins, int count_pays) inline {
    return (nft_collection, timestamp_end, per_to_break, frozen_coins, count_pays, scam);
}

;;
;; Type: Insurance
;;

builder $Insurance$_store(builder build_0, (slice, int, int, int, int, int) v) inline {
    var (v'nft_collection, v'timestamp_end, v'per_to_break, v'scam, v'count_pays, v'frozen_coins) = v;
    build_0 = __tact_store_address(build_0, v'nft_collection);
    build_0 = build_0.store_uint(v'timestamp_end, 64);
    build_0 = build_0.store_uint(v'per_to_break, 16);
    build_0 = build_0.store_int(v'scam, 1);
    build_0 = build_0.store_uint(v'count_pays, 32);
    build_0 = build_0.store_coins(v'frozen_coins);
    return build_0;
}

(slice, ((slice, int, int, int, int, int))) $Insurance$_load(slice sc_0) inline {
    var v'nft_collection = sc_0~__tact_load_address();
    var v'timestamp_end = sc_0~load_uint(64);
    var v'per_to_break = sc_0~load_uint(16);
    var v'scam = sc_0~load_int(1);
    var v'count_pays = sc_0~load_uint(32);
    var v'frozen_coins = sc_0~load_coins();
    return (sc_0, (v'nft_collection, v'timestamp_end, v'per_to_break, v'scam, v'count_pays, v'frozen_coins));
}

(slice, ((slice))) $Insurance$init$_load(slice sc_0) inline {
    var v'collection = sc_0~__tact_load_address();
    return (sc_0, (v'collection));
}

(slice, int, int, int, int, int) $Insurance$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$Insurance$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (slice collection) = $sc~$Insurance$init$_load();
        $sc.end_parse();
        return $Insurance$_contract_init(collection);
    }
}

() $Insurance$_contract_store((slice, int, int, int, int, int) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $Insurance$_store(b, v);
    set_data(b.end_cell());
}